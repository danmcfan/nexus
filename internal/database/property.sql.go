// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: property.sql

package database

import (
	"context"
	"database/sql"
)

const createProperty = `-- name: CreateProperty :one
INSERT INTO property (pk_property_id, name, address, is_demo, fk_point_of_contact_id, fk_manager_id, fk_client_id)
VALUES (?, ?, ?, ?, ?, ?, ?)
RETURNING pk_property_id, name, address, is_demo, fk_point_of_contact_id, fk_manager_id, fk_client_id
`

type CreatePropertyParams struct {
	PkPropertyID       string
	Name               string
	Address            string
	IsDemo             bool
	FkPointOfContactID sql.NullString
	FkManagerID        sql.NullString
	FkClientID         string
}

func (q *Queries) CreateProperty(ctx context.Context, arg CreatePropertyParams) (Property, error) {
	row := q.db.QueryRowContext(ctx, createProperty,
		arg.PkPropertyID,
		arg.Name,
		arg.Address,
		arg.IsDemo,
		arg.FkPointOfContactID,
		arg.FkManagerID,
		arg.FkClientID,
	)
	var i Property
	err := row.Scan(
		&i.PkPropertyID,
		&i.Name,
		&i.Address,
		&i.IsDemo,
		&i.FkPointOfContactID,
		&i.FkManagerID,
		&i.FkClientID,
	)
	return i, err
}

const deleteProperty = `-- name: DeleteProperty :exec
DELETE FROM property
WHERE pk_property_id = ?
`

func (q *Queries) DeleteProperty(ctx context.Context, pkPropertyID string) error {
	_, err := q.db.ExecContext(ctx, deleteProperty, pkPropertyID)
	return err
}

const getProperty = `-- name: GetProperty :one
SELECT property.pk_property_id, property.name, property.address, property.is_demo, property.fk_point_of_contact_id, property.fk_manager_id, property.fk_client_id,
  point_of_contact.pk_user_id AS point_of_contact_id,
  point_of_contact.first_name AS point_of_contact_first_name,
  point_of_contact.last_name AS point_of_contact_last_name,
  manager.pk_user_id AS manager_id,
  manager.first_name AS manager_first_name,
  manager.last_name AS manager_last_name
FROM property
LEFT JOIN user AS point_of_contact ON property.fk_point_of_contact_id = point_of_contact.pk_user_id
LEFT JOIN user AS manager ON property.fk_manager_id = manager.pk_user_id
WHERE pk_property_id = ?
`

type GetPropertyRow struct {
	PkPropertyID            string
	Name                    string
	Address                 string
	IsDemo                  bool
	FkPointOfContactID      sql.NullString
	FkManagerID             sql.NullString
	FkClientID              string
	PointOfContactID        sql.NullString
	PointOfContactFirstName sql.NullString
	PointOfContactLastName  sql.NullString
	ManagerID               sql.NullString
	ManagerFirstName        sql.NullString
	ManagerLastName         sql.NullString
}

func (q *Queries) GetProperty(ctx context.Context, pkPropertyID string) (GetPropertyRow, error) {
	row := q.db.QueryRowContext(ctx, getProperty, pkPropertyID)
	var i GetPropertyRow
	err := row.Scan(
		&i.PkPropertyID,
		&i.Name,
		&i.Address,
		&i.IsDemo,
		&i.FkPointOfContactID,
		&i.FkManagerID,
		&i.FkClientID,
		&i.PointOfContactID,
		&i.PointOfContactFirstName,
		&i.PointOfContactLastName,
		&i.ManagerID,
		&i.ManagerFirstName,
		&i.ManagerLastName,
	)
	return i, err
}

const listProperties = `-- name: ListProperties :many
SELECT property.pk_property_id, property.name, property.address, property.is_demo, property.fk_point_of_contact_id, property.fk_manager_id, property.fk_client_id,
  point_of_contact.pk_user_id AS point_of_contact_id,
  point_of_contact.first_name AS point_of_contact_first_name,
  point_of_contact.last_name AS point_of_contact_last_name,
  manager.pk_user_id AS manager_id,
  manager.first_name AS manager_first_name,
  manager.last_name AS manager_last_name
FROM property
LEFT JOIN user AS point_of_contact ON property.fk_point_of_contact_id = point_of_contact.pk_user_id
LEFT JOIN user AS manager ON property.fk_manager_id = manager.pk_user_id
ORDER BY pk_property_id
LIMIT ? OFFSET ?
`

type ListPropertiesParams struct {
	Limit  int64
	Offset int64
}

type ListPropertiesRow struct {
	PkPropertyID            string
	Name                    string
	Address                 string
	IsDemo                  bool
	FkPointOfContactID      sql.NullString
	FkManagerID             sql.NullString
	FkClientID              string
	PointOfContactID        sql.NullString
	PointOfContactFirstName sql.NullString
	PointOfContactLastName  sql.NullString
	ManagerID               sql.NullString
	ManagerFirstName        sql.NullString
	ManagerLastName         sql.NullString
}

func (q *Queries) ListProperties(ctx context.Context, arg ListPropertiesParams) ([]ListPropertiesRow, error) {
	rows, err := q.db.QueryContext(ctx, listProperties, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListPropertiesRow
	for rows.Next() {
		var i ListPropertiesRow
		if err := rows.Scan(
			&i.PkPropertyID,
			&i.Name,
			&i.Address,
			&i.IsDemo,
			&i.FkPointOfContactID,
			&i.FkManagerID,
			&i.FkClientID,
			&i.PointOfContactID,
			&i.PointOfContactFirstName,
			&i.PointOfContactLastName,
			&i.ManagerID,
			&i.ManagerFirstName,
			&i.ManagerLastName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPropertiesWithFilter = `-- name: ListPropertiesWithFilter :many
SELECT property.pk_property_id, property.name, property.address, property.is_demo, property.fk_point_of_contact_id, property.fk_manager_id, property.fk_client_id,
  point_of_contact.pk_user_id AS point_of_contact_id,
  point_of_contact.first_name AS point_of_contact_first_name,
  point_of_contact.last_name AS point_of_contact_last_name,
  manager.pk_user_id AS manager_id,
  manager.first_name AS manager_first_name,
  manager.last_name AS manager_last_name
FROM property
LEFT JOIN user AS point_of_contact ON property.fk_point_of_contact_id = point_of_contact.pk_user_id
LEFT JOIN user AS manager ON property.fk_manager_id = manager.pk_user_id
WHERE name LIKE ?
  OR address LIKE ?
ORDER BY pk_property_id
LIMIT ? OFFSET ?
`

type ListPropertiesWithFilterParams struct {
	Name    string
	Address string
	Limit   int64
	Offset  int64
}

type ListPropertiesWithFilterRow struct {
	PkPropertyID            string
	Name                    string
	Address                 string
	IsDemo                  bool
	FkPointOfContactID      sql.NullString
	FkManagerID             sql.NullString
	FkClientID              string
	PointOfContactID        sql.NullString
	PointOfContactFirstName sql.NullString
	PointOfContactLastName  sql.NullString
	ManagerID               sql.NullString
	ManagerFirstName        sql.NullString
	ManagerLastName         sql.NullString
}

func (q *Queries) ListPropertiesWithFilter(ctx context.Context, arg ListPropertiesWithFilterParams) ([]ListPropertiesWithFilterRow, error) {
	rows, err := q.db.QueryContext(ctx, listPropertiesWithFilter,
		arg.Name,
		arg.Address,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListPropertiesWithFilterRow
	for rows.Next() {
		var i ListPropertiesWithFilterRow
		if err := rows.Scan(
			&i.PkPropertyID,
			&i.Name,
			&i.Address,
			&i.IsDemo,
			&i.FkPointOfContactID,
			&i.FkManagerID,
			&i.FkClientID,
			&i.PointOfContactID,
			&i.PointOfContactFirstName,
			&i.PointOfContactLastName,
			&i.ManagerID,
			&i.ManagerFirstName,
			&i.ManagerLastName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProperty = `-- name: UpdateProperty :one
UPDATE property
SET name = ?, address = ?, is_demo = ?, fk_point_of_contact_id = ?, fk_manager_id = ?, fk_client_id = ?
WHERE pk_property_id = ?
RETURNING pk_property_id, name, address, is_demo, fk_point_of_contact_id, fk_manager_id, fk_client_id
`

type UpdatePropertyParams struct {
	Name               string
	Address            string
	IsDemo             bool
	FkPointOfContactID sql.NullString
	FkManagerID        sql.NullString
	FkClientID         string
	PkPropertyID       string
}

func (q *Queries) UpdateProperty(ctx context.Context, arg UpdatePropertyParams) (Property, error) {
	row := q.db.QueryRowContext(ctx, updateProperty,
		arg.Name,
		arg.Address,
		arg.IsDemo,
		arg.FkPointOfContactID,
		arg.FkManagerID,
		arg.FkClientID,
		arg.PkPropertyID,
	)
	var i Property
	err := row.Scan(
		&i.PkPropertyID,
		&i.Name,
		&i.Address,
		&i.IsDemo,
		&i.FkPointOfContactID,
		&i.FkManagerID,
		&i.FkClientID,
	)
	return i, err
}
