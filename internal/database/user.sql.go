// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user.sql

package database

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO user (pk_user_id, first_name, last_name)
VALUES (?, ?, ?)
RETURNING pk_user_id, first_name, last_name
`

type CreateUserParams struct {
	PkUserID  string
	FirstName string
	LastName  string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.PkUserID, arg.FirstName, arg.LastName)
	var i User
	err := row.Scan(&i.PkUserID, &i.FirstName, &i.LastName)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM user
WHERE pk_user_id = ?
`

func (q *Queries) DeleteUser(ctx context.Context, pkUserID string) error {
	_, err := q.db.ExecContext(ctx, deleteUser, pkUserID)
	return err
}

const getUser = `-- name: GetUser :one
SELECT pk_user_id, first_name, last_name
FROM user
WHERE pk_user_id = ?
`

func (q *Queries) GetUser(ctx context.Context, pkUserID string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, pkUserID)
	var i User
	err := row.Scan(&i.PkUserID, &i.FirstName, &i.LastName)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT pk_user_id, first_name, last_name
FROM user
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(&i.PkUserID, &i.FirstName, &i.LastName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE user
SET first_name = ?, last_name = ?
WHERE pk_user_id = ?
RETURNING pk_user_id, first_name, last_name
`

type UpdateUserParams struct {
	FirstName string
	LastName  string
	PkUserID  string
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser, arg.FirstName, arg.LastName, arg.PkUserID)
	var i User
	err := row.Scan(&i.PkUserID, &i.FirstName, &i.LastName)
	return i, err
}
