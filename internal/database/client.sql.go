// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: client.sql

package database

import (
	"context"
)

const createClient = `-- name: CreateClient :one
INSERT INTO client (pk_client_id, name)
VALUES (?, ?)
RETURNING pk_client_id, name
`

type CreateClientParams struct {
	PkClientID string
	Name       string
}

func (q *Queries) CreateClient(ctx context.Context, arg CreateClientParams) (Client, error) {
	row := q.db.QueryRowContext(ctx, createClient, arg.PkClientID, arg.Name)
	var i Client
	err := row.Scan(&i.PkClientID, &i.Name)
	return i, err
}

const deleteClient = `-- name: DeleteClient :exec
DELETE FROM client
WHERE pk_client_id = ?
`

func (q *Queries) DeleteClient(ctx context.Context, pkClientID string) error {
	_, err := q.db.ExecContext(ctx, deleteClient, pkClientID)
	return err
}

const getClient = `-- name: GetClient :one
SELECT pk_client_id, name
FROM client
WHERE pk_client_id = ?
`

func (q *Queries) GetClient(ctx context.Context, pkClientID string) (Client, error) {
	row := q.db.QueryRowContext(ctx, getClient, pkClientID)
	var i Client
	err := row.Scan(&i.PkClientID, &i.Name)
	return i, err
}

const listClients = `-- name: ListClients :many
SELECT pk_client_id, name
FROM client
`

func (q *Queries) ListClients(ctx context.Context) ([]Client, error) {
	rows, err := q.db.QueryContext(ctx, listClients)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Client
	for rows.Next() {
		var i Client
		if err := rows.Scan(&i.PkClientID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateClient = `-- name: UpdateClient :one
UPDATE client
SET name = ?
WHERE pk_client_id = ?
RETURNING pk_client_id, name
`

type UpdateClientParams struct {
	Name       string
	PkClientID string
}

func (q *Queries) UpdateClient(ctx context.Context, arg UpdateClientParams) (Client, error) {
	row := q.db.QueryRowContext(ctx, updateClient, arg.Name, arg.PkClientID)
	var i Client
	err := row.Scan(&i.PkClientID, &i.Name)
	return i, err
}
