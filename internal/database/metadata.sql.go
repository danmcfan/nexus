// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: metadata.sql

package database

import (
	"context"
	"database/sql"
)

const createMetadata = `-- name: CreateMetadata :one
INSERT INTO metadata (fk_record_id, fk_created_by_id)
VALUES (?, ?)
RETURNING fk_record_id, created_at, updated_at, fk_created_by_id, fk_updated_by_id
`

type CreateMetadataParams struct {
	FkRecordID    string
	FkCreatedByID string
}

func (q *Queries) CreateMetadata(ctx context.Context, arg CreateMetadataParams) (Metadata, error) {
	row := q.db.QueryRowContext(ctx, createMetadata, arg.FkRecordID, arg.FkCreatedByID)
	var i Metadata
	err := row.Scan(
		&i.FkRecordID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FkCreatedByID,
		&i.FkUpdatedByID,
	)
	return i, err
}

const deleteMetadata = `-- name: DeleteMetadata :exec
DELETE FROM metadata
WHERE fk_record_id = ?
`

func (q *Queries) DeleteMetadata(ctx context.Context, fkRecordID string) error {
	_, err := q.db.ExecContext(ctx, deleteMetadata, fkRecordID)
	return err
}

const getMetadata = `-- name: GetMetadata :one
SELECT fk_record_id, created_at, updated_at, fk_created_by_id, fk_updated_by_id
FROM metadata
WHERE fk_record_id = ?
`

func (q *Queries) GetMetadata(ctx context.Context, fkRecordID string) (Metadata, error) {
	row := q.db.QueryRowContext(ctx, getMetadata, fkRecordID)
	var i Metadata
	err := row.Scan(
		&i.FkRecordID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FkCreatedByID,
		&i.FkUpdatedByID,
	)
	return i, err
}

const listMetadata = `-- name: ListMetadata :many
SELECT fk_record_id, created_at, updated_at, fk_created_by_id, fk_updated_by_id
FROM metadata
`

func (q *Queries) ListMetadata(ctx context.Context) ([]Metadata, error) {
	rows, err := q.db.QueryContext(ctx, listMetadata)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Metadata
	for rows.Next() {
		var i Metadata
		if err := rows.Scan(
			&i.FkRecordID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.FkCreatedByID,
			&i.FkUpdatedByID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMetadata = `-- name: UpdateMetadata :one
UPDATE metadata
SET updated_at = ?, fk_updated_by_id = ?
WHERE fk_record_id = ?
RETURNING fk_record_id, created_at, updated_at, fk_created_by_id, fk_updated_by_id
`

type UpdateMetadataParams struct {
	UpdatedAt     sql.NullTime
	FkUpdatedByID sql.NullString
	FkRecordID    string
}

func (q *Queries) UpdateMetadata(ctx context.Context, arg UpdateMetadataParams) (Metadata, error) {
	row := q.db.QueryRowContext(ctx, updateMetadata, arg.UpdatedAt, arg.FkUpdatedByID, arg.FkRecordID)
	var i Metadata
	err := row.Scan(
		&i.FkRecordID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FkCreatedByID,
		&i.FkUpdatedByID,
	)
	return i, err
}
